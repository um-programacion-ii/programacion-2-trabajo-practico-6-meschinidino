# Este archivo define los servicios de base de datos (MySQL y PostgreSQL) que usará tu aplicación.
# Se levantan como contenedores de Docker, lo que asegura un entorno consistente.
services:
  # Definición del servicio de MySQL
  mysql:
    image: mysql:8.4 # Usa la imagen oficial de MySQL versión 8.4
    container_name: microservices_mysql # Nombre del contenedor para fácil identificación
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: microservices_db # Crea esta base de datos al iniciar
      MYSQL_USER: microservices_user # Crea este usuario
      MYSQL_PASSWORD: microservices_pass # Contraseña para el usuario
    ports:
      - "3306:3306" # Mapea el puerto de tu máquina al puerto del contenedor
    volumes:
      - mysql_data:/var/lib/mysql # Guarda los datos de la BD para que no se pierdan al apagar el contenedor
    networks:
      - microservices_network # Conecta el contenedor a una red compartida
    healthcheck: # Revisa si la base de datos está saludable y lista para aceptar conexiones
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Definición del servicio de PostgreSQL
  postgres:
    image: postgres:16 # Usa la imagen oficial de PostgreSQL versión 16
    container_name: microservices_postgres
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: microservices_user
      POSTGRES_PASSWORD: microservices_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U microservices_user -d microservices_db"]
      timeout: 20s
      retries: 10

# Define los volúmenes para persistir los datos
volumes:
  mysql_data:
  postgres_data:

# Define la red para que los contenedores se puedan comunicar entre sí si fuera necesario
networks:
  microservices_network:
    driver: bridge
