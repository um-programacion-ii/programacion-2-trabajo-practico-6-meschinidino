spring:
  profiles:
    active: dev # Perfil activo por defecto. Si no especificamos otro, usará H2.

# --- es el separador que nos permite definir propiedades para diferentes perfiles en un mismo archivo.

---
# Perfil 'dev' (Desarrollo)
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:h2:mem:testdb # Base de datos en memoria H2.
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      enabled: true # Habilita la consola H2 en /h2-console
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop # Crea y borra el esquema en cada reinicio. Perfecto para desarrollo.
    show-sql: true
    properties:
      hibernate:
        format_sql: true

server:
  port: 8081

---
# Perfil 'mysql' (Producción con MySQL)
spring:
  config:
    activate:
      on-profile: mysql
  datasource:
    # Esta URL y credenciales coinciden con las del docker-compose.yml de tu README
    url: jdbc:mysql://localhost:3306/microservices_db?useSSL=false&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: microservices_user
    password: microservices_pass
  jpa:
    hibernate:
      ddl-auto: update # Actualiza el esquema si hay cambios en las entidades, pero no borra los datos.
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

server:
  port: 8081

---
# Perfil 'postgres' (Producción con PostgreSQL)
spring:
  config:
    activate:
      on-profile: postgres
  datasource:
    # Esta URL y credenciales coinciden con las del docker-compose.yml de tu README
    url: jdbc:postgresql://localhost:5432/microservices_db
    driver-class-name: org.postgresql.Driver
    username: microservices_user
    password: microservices_pass
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

server:
  port: 8081
